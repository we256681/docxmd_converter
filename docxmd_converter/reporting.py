"""
Reporting module for document processing results.
Handles console and file report generation.
"""

import json
from datetime import datetime
from pathlib import Path
from typing import Union

from .processor import ProcessingResults


class ProcessingReporter:
    """Handle processing reports"""

    def __init__(self):
        self.timestamp = datetime.now()

    def generate_report(
        self,
        results: ProcessingResults,
        format: str = "console",
        update_existing: bool = False,
        output_dir: Union[str, Path] = None,
    ) -> None:
        """Generate processing report

        Args:
            results: Processing results object
            format: Output format ('console' or 'file')
            update_existing: Update existing report file instead of creating new one
            output_dir: Directory to save report file (defaults to current directory)
        """
        if format == "console":
            self._print_console_report(results)
        elif format == "file":
            self._save_file_report(results, update_existing, output_dir)
        else:
            raise ValueError(f"Unknown report format: {format}")

    def _print_console_report(self, results: ProcessingResults) -> None:
        """Print report to console"""
        print("\n" + "=" * 60)
        print("üìã –û–¢–ß–ï–¢ –û –ü–û–°–¢–û–ë–†–ê–ë–û–¢–ö–ï –î–û–ö–£–ú–ï–ù–¢–û–í")
        print("=" * 60)
        print(f"‚è∞ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {self.timestamp.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üìÇ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {results.total}")
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {results.processed}")
        print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {results.skipped}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {results.errors}")

        # Success rate
        if results.total > 0:
            success_rate = (results.processed / results.total) * 100
            print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")

        # Quality statistics
        if any(results.quality_stats.values()):
            print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ß–ï–°–¢–í–ê:")
            print(f"  üü¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {results.quality_stats['high']} —Ñ–∞–π–ª–æ–≤")
            print(f"  üü° –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {results.quality_stats['medium']} —Ñ–∞–π–ª–æ–≤")
            print(f"  üî¥ –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {results.quality_stats['low']} —Ñ–∞–π–ª–æ–≤")

        # Error details
        if results.files_errored:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò ({len(results.files_errored)}):")
            for error in results.files_errored[:10]:  # Show max 10 errors
                print(f"  ‚Ä¢ {error}")
            if len(results.files_errored) > 10:
                print(f"  ... –∏ –µ—â–µ {len(results.files_errored) - 10} –æ—à–∏–±–æ–∫")

        # Status summary
        print("\nüéØ –û–ë–©–ò–ô –°–¢–ê–¢–£–°: ", end="")
        if results.errors == 0:
            print("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        elif results.processed > 0:
            print("‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
        else:
            print("‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")

        print("=" * 60)

    def _save_file_report(
        self,
        results: ProcessingResults,
        update_existing: bool = False,
        output_dir: Union[str, Path] = None,
    ) -> None:
        """Save report to file"""
        if output_dir is None:
            output_dir = Path.cwd()
        else:
            output_dir = Path(output_dir)

        # Determine report file path
        base_name = "processing_report.md"
        report_path = output_dir / base_name

        if report_path.exists() and not update_existing:
            # Create versioned file with timestamp
            timestamp = self.timestamp.strftime("%Y%m%d_%H%M%S")
            report_path = output_dir / f"processing_report_{timestamp}.md"

        # Generate report content
        report_content = self._generate_markdown_report(results, update_existing)

        # Write report
        try:
            report_path.parent.mkdir(parents=True, exist_ok=True)
            with open(report_path, "w", encoding="utf-8") as f:
                f.write(report_content)

            print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_path}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

    def _generate_markdown_report(
        self, results: ProcessingResults, is_update: bool = False
    ) -> str:
        """Generate markdown report content"""
        timestamp_str = self.timestamp.strftime("%Y-%m-%d %H:%M:%S")

        # Header
        if is_update:
            content = "# –û—Ç—á–µ—Ç –æ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω)\n\n"
        else:
            content = "# –û—Ç—á–µ—Ç –æ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n\n"

        content += f"**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {timestamp_str}\n"
        content += "**–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä:** DocxMD Converter v0.1.0\n\n"

        # Executive Summary
        content += "## –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ\n\n"
        content += f"‚úÖ **–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:** {results.processed} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        content += f"‚è≠Ô∏è **–ü—Ä–æ–ø—É—â–µ–Ω–æ:** {results.skipped} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        content += f"‚ùå **–û—à–∏–±–æ–∫:** {results.errors}\n"
        content += f"üìÅ **–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:** {results.total}\n\n"

        # Status
        if results.errors == 0:
            status = "‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        elif results.processed > 0:
            status = "‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏"
        else:
            status = "‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å"

        content += f"**–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:** {status}\n\n"

        # Success rate
        if results.total > 0:
            success_rate = (results.processed / results.total) * 100
            content += f"**–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞:** {success_rate:.1f}%\n\n"

        content += "---\n\n"

        # Quality Statistics
        if any(results.quality_stats.values()):
            content += "## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n"
            total_processed = sum(results.quality_stats.values())

            if total_processed > 0:
                high_pct = (results.quality_stats["high"] / total_processed) * 100
                medium_pct = (results.quality_stats["medium"] / total_processed) * 100
                low_pct = (results.quality_stats["low"] / total_processed) * 100

                content += "| –ö–∞—á–µ—Å—Ç–≤–æ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ | –ü—Ä–æ—Ü–µ–Ω—Ç | –û–ø–∏—Å–∞–Ω–∏–µ |\n"
                content += "|----------|-------------------|---------|----------|\n"
                high_desc = "–í—Å–µ —Ä–∞–∑–¥–µ–ª—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º"
                medium_desc = "–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª–æ–≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
                low_desc = "–¢–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –º–∏–Ω–∏–º—É–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"

                content += f"| **üü¢ –í—ã—Å–æ–∫–æ–µ** | {results.quality_stats['high']} | {high_pct:.1f}% | {high_desc} |\n"
                content += f"| **üü° –°—Ä–µ–¥–Ω–µ–µ** | {results.quality_stats['medium']} | {medium_pct:.1f}% | {medium_desc} |\n"
                content += f"| **üî¥ –ù–∏–∑–∫–æ–µ** | {results.quality_stats['low']} | {low_pct:.1f}% | {low_desc} |\n\n"

        # Processing Details
        if results.processed > 0:
            content += "## –î–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n"
            content += "### ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã\n\n"

            if len(results.files_processed) <= 20:
                # Show all files if not too many
                for i, file_path in enumerate(results.files_processed, 1):
                    content += f"{i}. `{Path(file_path).name}`\n"
            else:
                # Show first 10 and last 10
                for i, file_path in enumerate(results.files_processed[:10], 1):
                    content += f"{i}. `{Path(file_path).name}`\n"
                content += (
                    f"... (–ø—Ä–æ–ø—É—â–µ–Ω–æ {len(results.files_processed) - 20} —Ñ–∞–π–ª–æ–≤) ...\n"
                )
                for i, file_path in enumerate(
                    results.files_processed[-10:], len(results.files_processed) - 9
                ):
                    content += f"{i}. `{Path(file_path).name}`\n"

            content += "\n"

        # Skipped files
        if results.files_skipped:
            content += "### ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã\n\n"
            content += "–°–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã –±—ã–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Ä–∞–Ω–µ–µ):\n\n"

            for file_path in results.files_skipped[:10]:  # Show max 10
                content += f"- `{Path(file_path).name}`\n"

            if len(results.files_skipped) > 10:
                content += f"- ... –∏ –µ—â–µ {len(results.files_skipped) - 10} —Ñ–∞–π–ª–æ–≤\n"

            content += "\n"

        # Errors
        if results.files_errored:
            content += "### ‚ùå –û—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n"
            content += "–°–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å:\n\n"

            for error in results.files_errored[:10]:  # Show max 10
                content += f"- {error}\n"

            if len(results.files_errored) > 10:
                content += f"- ... –∏ –µ—â–µ {len(results.files_errored) - 10} –æ—à–∏–±–æ–∫\n"

            content += "\n"

        # Recommendations
        content += "---\n\n"
        content += "## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"

        if results.quality_stats["low"] > 0:
            low_count = results.quality_stats["low"]
            content += f"### üìù –î–æ–∫—É–º–µ–Ω—Ç—ã —Å –Ω–∏–∑–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º ({low_count} —à—Ç.)\n\n"
            recommendation = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –Ω–∏–∑–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏:"
            content += f"{recommendation}\n\n"
            content += (
                '1. –ù–∞–π–¥–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å `"processing_quality": "low"` –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö\n'
            )
            content += "2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞–∑–¥–µ–ª–æ–≤ –≤—Ä—É—á–Ω—É—é\n"
            content += "3. –û–±–Ω–æ–≤–∏—Ç–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏\n\n"

        if results.files_errored:
            content += (
                f"### üîß –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ ({len(results.files_errored)} —à—Ç.)\n\n"
            )
            content += "–î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫:\n\n"
            content += "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º\n"
            content += "2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ (UTF-8)\n"
            content += "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
            content += (
                "4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å —Ñ–ª–∞–≥–æ–º `--force-process`\n\n"
            )

        # Next steps
        content += "### üöÄ –î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è\n\n"
        content += (
            "1. **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:** –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –Ω–∏–∑–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º\n"
        )
        content += "2. **–†—É—á–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞:** –î–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n"
        content += "3. **–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º\n"
        content += "4. **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:** –í–Ω–µ–¥—Ä–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –ø—Ä–æ—Ü–µ—Å—Å CI/CD\n\n"

        # Technical Information
        content += "---\n\n"
        content += "## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
        content += f"**–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {timestamp_str}\n"
        content += "**–í–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞:** DocxMD Converter v0.1.0\n"
        content += "**–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:** Markdown —Å JSON –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏\n\n"

        # Metadata
        metadata = {
            "report_type": "processing_report",
            "generated_at": timestamp_str,
            "generator": "docxmd_converter",
            "version": "0.1.0",
            "statistics": results.to_dict(),
        }

        content += "<!-- REPORT METADATA\n"
        content += json.dumps(metadata, indent=2, ensure_ascii=False)
        content += "\n-->\n"

        return content

    def generate_summary_report(self, results: ProcessingResults) -> str:
        """Generate brief summary report"""
        if results.total == 0:
            return "üìã –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"

        status_emoji = (
            "‚úÖ" if results.errors == 0 else ("‚ö†Ô∏è" if results.processed > 0 else "‚ùå")
        )

        summary = (
            f"{status_emoji} –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: "
            f"{results.processed}/{results.total} —Ñ–∞–π–ª–æ–≤"
        )

        if results.skipped > 0:
            summary += f", –ø—Ä–æ–ø—É—â–µ–Ω–æ: {results.skipped}"

        if results.errors > 0:
            summary += f", –æ—à–∏–±–æ–∫: {results.errors}"

        return summary


# Convenience functions for quick reporting
def print_processing_summary(results: ProcessingResults) -> None:
    """Print quick processing summary"""
    reporter = ProcessingReporter()
    print(reporter.generate_summary_report(results))


def save_processing_report(
    results: ProcessingResults,
    output_dir: Union[str, Path] = None,
    update_existing: bool = False,
) -> None:
    """Save processing report to file"""
    reporter = ProcessingReporter()
    reporter.generate_report(
        results, format="file", update_existing=update_existing, output_dir=output_dir
    )
