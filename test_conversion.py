#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç DocxMD Converter —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏.
"""

import shutil
import sys
import tempfile
from pathlib import Path

# –î–æ–±–∞–≤–∏–º –ø—É—Ç—å –∫ –ø–∞–∫–µ—Ç—É
sys.path.insert(0, str(Path(__file__).parent))


def create_test_markdown():
    """–°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π markdown —Ñ–∞–π–ª."""
    content = """# –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç

–≠—Ç–æ **—Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç** –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–µ–∂–¥—É —Ñ–æ—Ä–º–∞—Ç–∞–º–∏.

## –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è `.docx` –≤ `.md`
- ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è `.md` –≤ `.docx`
- ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
- ‚úÖ –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π

### –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞

```python
from docxmd_converter import DocxMdConverter

converter = DocxMdConverter()
converter.convert_file("input.md", "output.docx", "md2docx")
```

### –¢–∞–±–ª–∏—Ü–∞ —Ñ—É–Ω–∫—Ü–∏–π

| –§—É–Ω–∫—Ü–∏—è | –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è | –û–ø–∏—Å–∞–Ω–∏–µ |
|---------|----------------|----------|
| CLI | ‚úÖ | –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ |
| GUI | ‚úÖ | –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å |
| –®–∞–±–ª–æ–Ω—ã | ‚úÖ | –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ |
| –†–µ–∫—É—Ä—Å–∏—è | ‚úÖ | –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–æ–∫ |

> **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ**: –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
> –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–µ–∂–¥—É —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.

---

*–ö–æ–Ω–µ—Ü —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞*
"""
    return content


def test_real_conversion():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤."""
    print("üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
    print("=" * 60)

    try:
        from docxmd_converter import DocxMdConverter

        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)

            # –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
            src_dir = temp_path / "source"
            dst_dir = temp_path / "destination"
            src_dir.mkdir()
            dst_dir.mkdir()

            print(f"üìÅ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã:")
            print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {src_dir}")
            print(f"   –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {dst_dir}")

            # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            test_files = []

            # 1. –ü—Ä–æ—Å—Ç–æ–π markdown
            md1 = src_dir / "test1.md"
            md1.write_text(create_test_markdown(), encoding="utf-8")
            test_files.append(md1)

            # 2. Markdown –≤ –ø–æ–¥–ø–∞–ø–∫–µ
            subdir = src_dir / "subfolder"
            subdir.mkdir()
            md2 = subdir / "test2.md"
            md2.write_text(
                "# –î–æ–∫—É–º–µ–Ω—Ç –∏–∑ –ø–æ–¥–ø–∞–ø–∫–∏\n\n–≠—Ç–æ —Ç–µ—Å—Ç **—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã** –ø–∞–ø–æ–∫.",
                encoding="utf-8",
            )
            test_files.append(md2)

            print(f"üìÑ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã:")
            for f in test_files:
                size = f.stat().st_size
                rel_path = f.relative_to(src_dir)
                print(f"   {rel_path} ({size} bytes)")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
            converter = DocxMdConverter(log_level="INFO")
            print("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –¢–µ—Å—Ç 1: MD ‚Üí DOCX
            print("\nüîÑ –¢–µ—Å—Ç 1: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è MD ‚Üí DOCX")
            successful, total = converter.convert_directory(
                src_dir=src_dir, dst_dir=dst_dir, direction="md2docx"
            )

            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {successful}/{total} —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            docx_files = list(dst_dir.rglob("*.docx"))
            print(f"üìÑ –°–æ–∑–¥–∞–Ω–Ω—ã–µ .docx —Ñ–∞–π–ª—ã:")
            for f in docx_files:
                size = f.stat().st_size
                rel_path = f.relative_to(dst_dir)
                print(f"   {rel_path} ({size} bytes)")

            # –¢–µ—Å—Ç 2: DOCX ‚Üí MD (–æ–±—Ä–∞—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è)
            print("\nüîÑ –¢–µ—Å—Ç 2: –û–±—Ä–∞—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è DOCX ‚Üí MD")

            # –ù–æ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            back_dir = temp_path / "back_conversion"
            back_dir.mkdir()

            successful2, total2 = converter.convert_directory(
                src_dir=dst_dir, dst_dir=back_dir, direction="docx2md"
            )

            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {successful2}/{total2} —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            md_files = list(back_dir.rglob("*.md"))
            print(f"üìÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ .md —Ñ–∞–π–ª—ã:")
            for f in md_files:
                size = f.stat().st_size
                rel_path = f.relative_to(back_dir)
                print(f"   {rel_path} ({size} bytes)")

            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print("\n" + "=" * 60)
            print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
            print(f"   ‚úÖ MD ‚Üí DOCX: {successful}/{total}")
            print(f"   ‚úÖ DOCX ‚Üí MD: {successful2}/{total2}")
            structure_ok = len(md_files) == len(test_files)
            status = "—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞" if structure_ok else "–Ω–∞—Ä—É—à–µ–Ω–∞"
            print(f"   üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫: {status}")

            if successful == total and successful2 == total2:
                print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print("‚ö†Ô∏è  –ï—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
                return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback

        traceback.print_exc()
        return False


def test_cli_with_real_files():
    """–¢–µ—Å—Ç CLI —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏."""
    print("\nüñ•Ô∏è  –¢–µ—Å—Ç CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
    print("=" * 60)

    try:
        import subprocess

        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ
        test_dir = Path("temp_test")
        test_dir.mkdir(exist_ok=True)

        src_dir = test_dir / "markdown"
        dst_dir = test_dir / "docx_out"
        src_dir.mkdir(exist_ok=True)
        dst_dir.mkdir(exist_ok=True)

        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_md = src_dir / "cli_test.md"
        test_md.write_text(
            "# CLI Test\n\n–≠—Ç–æ —Ç–µ—Å—Ç **CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞**.", encoding="utf-8"
        )

        print(f"üìÑ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_md}")

        # Use current Python interpreter
        import sys

        # –ó–∞–ø—É—Å–∫–∞–µ–º CLI –∫–æ–º–∞–Ω–¥—É
        cmd = [
            sys.executable,
            "-m",
            "docxmd_converter.cli",
            "--src",
            str(src_dir),
            "--dst",
            str(dst_dir),
            "--direction",
            "md2docx",
            "--verbose",
        ]

        print("üñ•Ô∏è  –ó–∞–ø—É—Å–∫ CLI –∫–æ–º–∞–Ω–¥—ã:")
        print(f"   {' '.join(cmd)}")

        result = subprocess.run(
            cmd, capture_output=True, text=True, cwd=Path(__file__).parent
        )

        print(f"üìä –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}")

        if result.stdout:
            print("üì§ –í—ã–≤–æ–¥:")
            print("   " + result.stdout.replace("\n", "\n   "))

        if result.stderr:
            print("‚ö†Ô∏è  –û—à–∏–±–∫–∏:")
            print("   " + result.stderr.replace("\n", "\n   "))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output_files = list(dst_dir.rglob("*.docx"))
        if output_files:
            print(f"‚úÖ CLI —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª {len(output_files)} —Ñ–∞–π–ª(–æ–≤)")
            for f in output_files:
                size = f.stat().st_size
                print(f"   üìÑ {f.name} ({size} bytes)")
        else:
            print("‚ùå CLI –Ω–µ —Å–æ–∑–¥–∞–ª –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")

        # –û—á–∏—Å—Ç–∫–∞
        shutil.rmtree(test_dir)
        print("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")

        return result.returncode == 0 and len(output_files) > 0

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ CLI —Ç–µ—Å—Ç–∞: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üéØ DocxMD Converter - –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("=" * 70)

    tests_results = []

    # –¢–µ—Å—Ç 1: –†–µ–∞–ª—å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
    print("–¢–ï–°–¢ 1: –†–µ–∞–ª—å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤")
    tests_results.append(test_real_conversion())

    # –¢–µ—Å—Ç 2: CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    print("\n–¢–ï–°–¢ 2: CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    tests_results.append(test_cli_with_real_files())

    # –ò—Ç–æ–≥–∏
    passed = sum(tests_results)
    total = len(tests_results)

    print("\n" + "=" * 70)
    print("üèÅ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   üìä –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")

    if passed == total:
        print("   üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü–∞–∫–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω!")
        print("   ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("   ‚úÖ CLI —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è")
        print("   ‚úÖ Pandoc –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print(f"   ‚ö†Ô∏è  {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")

    print("=" * 70)

    return passed == total


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
