#!/usr/bin/env python3
"""
Test script for post-processing functionality
"""

import tempfile
import os
from pathlib import Path

# Create test markdown files
test_content = """
# –î–æ–ª–∂–Ω–æ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –¢–µ—Å—Ç–æ–≤–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å

## 1. –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è

1.1. –¢–µ—Å—Ç–æ–≤–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.

1.2. –ù–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –ª–∏—Ü–æ, –∏–º–µ—é—â–µ–µ –≤—ã—Å—à–µ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ.

1.3. –ê–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å:
- –æ—Å–Ω–æ–≤—ã —Ç—Ä—É–¥–æ–≤–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞;
- –ø—Ä–∞–≤–∏–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ç—Ä—É–¥–æ–≤–æ–≥–æ —Ä–∞—Å–ø–æ—Ä—è–¥–∫–∞;
- –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞.

## 2. –§—É–Ω–∫—Ü–∏–∏

2.1. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.
2.2. –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã.

## 3. –î–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏

3.1. –ò—Å–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –ø–æ —Ä–∞–±–æ—Ç–µ.
3.2. –í–µ–¥–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç.

## 4. –ü—Ä–∞–≤–∞

4.1. –ò–º–µ–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
4.2. –í–Ω–æ—Å–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã.

## 5. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å

–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç—Å—è –∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:
- –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–≤–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã;
- –∑–∞ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π.
"""

def main():
    # Create temporary directory with test files
    with tempfile.TemporaryDirectory() as temp_dir:
        print(f"üìÅ Created temporary test directory: {temp_dir}")

        # Create test markdown files
        test_files = [
            "–ê–≥–µ–Ω—Ç –ø–æ —Ä–æ–∑—ã—Å–∫—É.md",
            "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Ç–¥–µ–ª–∞.md",
            "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞.md"
        ]

        for filename in test_files:
            filepath = Path(temp_dir) / filename
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(test_content)
            print(f"‚úÖ Created: {filename}")

        print("\n" + "="*60)
        print("üß™ TESTING CLI FUNCTIONALITY")
        print("="*60)

        # Test basic processing (no conversion, only post-processing)
        print("\nüìã Testing basic post-processing...")
        os.system(f'python -m docxmd_converter.cli --src "{temp_dir}" --dst "{temp_dir}" --format docx2md --post-process --processor basic --report console')

        print("\nüìã Testing advanced post-processing with file report...")
        os.system(f'python -m docxmd_converter.cli --src "{temp_dir}" --dst "{temp_dir}" --format docx2md --post-process --processor advanced --report file --force-process')

        # Check if files were processed
        print("\nüìÇ Checking processed files...")
        for filename in test_files:
            filepath = Path(temp_dir) / filename
            if filepath.exists():
                with open(filepath, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if "<!-- METADATA" in content:
                        print(f"‚úÖ {filename} was processed (contains metadata)")
                    else:
                        print(f"‚ö†Ô∏è {filename} was not processed (no metadata)")

        # Check if report was generated
        report_files = list(Path(temp_dir).glob("processing_report*.md"))
        if report_files:
            print(f"üìÑ Generated report: {report_files[0].name}")
        else:
            print("‚ö†Ô∏è No report file found")

        print(f"\nüîó Test files location: {temp_dir}")
        print("You can manually inspect the files before the temp directory is cleaned up")
        input("Press Enter to continue and cleanup...")

if __name__ == "__main__":
    main()