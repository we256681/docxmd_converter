name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      timeout-minutes: 15
      run: |
        sudo apt-get update -q
        sudo apt-get install -y -q --no-install-recommends pandoc

    - name: Install dependencies
      timeout-minutes: 20
      run: |
        python -m pip install --upgrade pip --quiet
        pip install -e . --quiet
        pip install pytest pytest-cov black isort flake8 mypy --quiet

    - name: Run linting
      run: |
        black --check .
        isort --check-only .
        flake8 --config=.flake8 . --exclude=venv,build,dist

    - name: Run type checking
      run: |
        mypy docxmd_converter --ignore-missing-imports

    - name: Run tests
      run: |
        pytest tests/ -v --cov=docxmd_converter --cov-report=xml

    - name: Run functional tests
      run: |
        python test_conversion.py

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      timeout-minutes: 10
      run: |
        python -m pip install --upgrade pip --quiet
        pip install build twine --quiet

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  test-publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}