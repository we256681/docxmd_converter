#!/usr/bin/env python3
"""
üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DocxMD Converter
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.
"""

import sys
import subprocess
import tempfile
from pathlib import Path
import shutil

def print_header(title):
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫."""
    print("\n" + "=" * 70)
    print(f"üéØ {title}")
    print("=" * 70)

def print_success(message):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ."""
    print(f"‚úÖ {message}")

def print_info(message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    print(f"‚ÑπÔ∏è  {message}")

def check_project_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞."""
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞")

    required_files = [
        "docxmd_converter/__init__.py",
        "docxmd_converter/core.py",
        "docxmd_converter/cli.py",
        "docxmd_converter/gui.py",
        "pyproject.toml",
        "README.md",
        "LICENSE",
        "requirements.txt",
        ".github/workflows/ci.yml",
        ".github/workflows/release.yml",
        "PYPI_DEPLOYMENT.md"
    ]

    missing = []
    for file in required_files:
        path = Path(file)
        if path.exists():
            size = path.stat().st_size if path.is_file() else "dir"
            print_success(f"{file} ({size} bytes)")
        else:
            missing.append(file)
            print(f"‚ùå {file} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    if not missing:
        print_success("–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ!")
        return True
    else:
        print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing}")
        return False

def check_package_installation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–∞."""
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–∞")

    try:
        # –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        from docxmd_converter import DocxMdConverter, cli_main, gui_run
        print_success("–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

        from docxmd_converter.core import ConversionError
        print_success("–ò—Å–∫–ª—é—á–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
        import docxmd_converter
        version = getattr(docxmd_converter, '__version__', '0.1.0')
        print_success(f"–í–µ—Ä—Å–∏—è –ø–∞–∫–µ—Ç–∞: {version}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def check_cli_commands():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ CLI –∫–æ–º–∞–Ω–¥."""
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ CLI –∫–æ–º–∞–Ω–¥")

    commands = [
        (["python", "-m", "docxmd_converter.cli", "--help"], "CLI –º–æ–¥—É–ª—å"),
        (["python", "-c", "from docxmd_converter.gui import run; print('GUI –≥–æ—Ç–æ–≤')"], "GUI –º–æ–¥—É–ª—å")
    ]

    success_count = 0
    for cmd, name in commands:
        try:
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=10,
                cwd=Path.cwd()
            )

            if result.returncode == 0:
                print_success(f"{name} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                success_count += 1
            else:
                print(f"‚ö†Ô∏è  {name}: {result.stderr.strip()[:100]}")

        except Exception as e:
            print(f"‚ùå {name}: –æ—à–∏–±–∫–∞ {e}")

    return success_count == len(commands)

def check_conversion_functionality():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏."""
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")

    try:
        from docxmd_converter import DocxMdConverter

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∞
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)

            # –¢–µ—Å—Ç–æ–≤—ã–π markdown —Ñ–∞–π–ª
            test_md = temp_path / "test.md"
            test_md.write_text(
                "# –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç\n\n"
                "–≠—Ç–æ **—Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç** –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–∞.\n\n"
                "## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n\n"
                "- ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è MD ‚Üí DOCX\n"
                "- ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è DOCX ‚Üí MD\n"
                "- ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞\n",
                encoding='utf-8'
            )

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
            converter = DocxMdConverter()
            print_success("–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (Pandoc –Ω–∞–π–¥–µ–Ω)")

            # –¢–µ—Å—Ç MD ‚Üí DOCX
            docx_file = temp_path / "test.docx"
            converter.convert_file(test_md, docx_file, "md2docx")

            if docx_file.exists():
                size = docx_file.stat().st_size
                print_success(f"MD ‚Üí DOCX: —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω ({size} bytes)")
            else:
                print("‚ùå MD ‚Üí DOCX: —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
                return False

            # –¢–µ—Å—Ç DOCX ‚Üí MD
            md_back = temp_path / "test_back.md"
            converter.convert_file(docx_file, md_back, "docx2md")

            if md_back.exists():
                size = md_back.stat().st_size
                print_success(f"DOCX ‚Üí MD: —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω ({size} bytes)")
            else:
                print("‚ùå DOCX ‚Üí MD: —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
                return False

        print_success("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return False

def check_github_actions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ GitHub Actions –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ GitHub Actions")

    workflows = [
        ".github/workflows/ci.yml",
        ".github/workflows/release.yml"
    ]

    for workflow in workflows:
        path = Path(workflow)
        if path.exists():
            print_success(f"{workflow} –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print(f"‚ùå {workflow} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–∞ PR
    pr_template = Path(".github/PULL_REQUEST_TEMPLATE.md")
    if pr_template.exists():
        print_success("–®–∞–±–ª–æ–Ω PR –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        print("‚ö†Ô∏è  –®–∞–±–ª–æ–Ω PR –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    return True

def check_pypi_readiness():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ PyPI."""
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ PyPI")

    try:
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–±–æ—Ä–∫–∏
        result = subprocess.run(
            ["python", "-m", "build", "--wheel", "--sdist"],
            capture_output=True,
            text=True,
            timeout=30
        )

        if result.returncode == 0:
            print_success("–ü–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            dist_dir = Path("dist")
            if dist_dir.exists():
                files = list(dist_dir.glob("*"))
                print_info(f"–°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
                for f in files:
                    print_info(f"  - {f.name} ({f.stat().st_size} bytes)")

            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {result.stderr}")
            return False

    except subprocess.TimeoutExpired:
        print("‚ö†Ô∏è  Timeout –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –ø–∞–∫–µ—Ç–∞")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–±–æ—Ä–∫–∏: {e}")
        return False

def show_project_summary():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ."""
    print_header("–ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
    py_files = len(list(Path(".").rglob("*.py"))) - len(list(Path("venv").rglob("*.py"))) if Path("venv").exists() else len(list(Path(".").rglob("*.py")))
    md_files = len(list(Path(".").glob("*.md")))
    config_files = len(list(Path(".").rglob("*.yml"))) + len(list(Path(".").rglob("*.yaml"))) + len(list(Path(".").rglob("*.toml"))) + len(list(Path(".").rglob("*.cfg")))

    print_info(f"Python —Ñ–∞–π–ª–æ–≤: {py_files}")
    print_info(f"–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {md_files}")
    print_info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {config_files}")

    # –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞
    package_dir = Path("docxmd_converter")
    if package_dir.exists():
        size = sum(f.stat().st_size for f in package_dir.rglob("*") if f.is_file())
        print_info(f"–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: {size // 1024}KB")

    print_success("–ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ PyPI!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    print_header("üéØ DocxMD Converter - –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏")

    tests = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞", check_project_structure),
        ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞", check_package_installation),
        ("CLI –∫–æ–º–∞–Ω–¥—ã", check_cli_commands),
        ("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏", check_conversion_functionality),
        ("GitHub Actions", check_github_actions),
        ("–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ PyPI", check_pypi_readiness),
    ]

    passed = 0
    total = len(tests)

    for test_name, test_func in tests:
        print_info(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        try:
            if test_func():
                passed += 1
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    show_project_summary()

    # –ò—Ç–æ–≥–∏
    print_header("üèÅ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print(f"üìä –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")

    if passed == total:
        print_success("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print_success("‚ú® –ü—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print_success("üöÄ –ì–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ PyPI!")
        print()
        print("üéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ GitHub")
        print("   2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å PyPI —Ç–æ–∫–µ–Ω—ã –≤ GitHub Secrets")
        print("   3. –°–æ–∑–¥–∞—Ç—å —Ç–µ–≥ v0.1.0 –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–ª–∏–∑–∞")
        print("   4. –ù–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π! üéâ")
    else:
        print(f"‚ö†Ô∏è  {total - passed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã")

    print("=" * 70)

    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)