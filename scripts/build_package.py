#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ –ø–∞–∫–µ—Ç–∞ –¥–ª—è PyPI
"""

import os
import shutil
import subprocess
import sys
from pathlib import Path


def run_command(cmd, description):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    print(f"üîß {description}...")
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)

    if result.returncode != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
        return False
    else:
        print(f"‚úÖ {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        if result.stdout.strip():
            print(f"   {result.stdout.strip()}")
        return True


def clean_build_dirs():
    """–û—á–∏—Å—Ç–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–±–æ—Ä–∫–∏"""
    dirs_to_clean = ['build', 'dist', 'src/docxmd_converter.egg-info']

    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            shutil.rmtree(dir_name)
            print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")


def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    required_packages = ['build', 'twine']

    for package in required_packages:
        if not run_command(f"python -c 'import {package}'", f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {package}"):
            print(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package}...")
            if not run_command(f"pip install {package}", f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package}"):
                return False

    return True


def validate_package_structure():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–∫–µ—Ç–∞"""
    required_files = [
        'pyproject.toml',
        'setup.py',
        'README.md',
        'LICENSE',
        'src/docxmd_converter/__init__.py'
    ]

    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)

    if missing_files:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for file_path in missing_files:
            print(f"   - {file_path}")
        return False

    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–∫–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    return True


def build_package():
    """–°–æ–±—Ä–∞—Ç—å –ø–∞–∫–µ—Ç"""
    print("üèóÔ∏è  –°–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞...")

    # –û—á–∏—Å—Ç–∫–∞
    clean_build_dirs()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    if not check_requirements():
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if not validate_package_structure():
        return False

    # –°–±–æ—Ä–∫–∞
    if not run_command("python -m build", "–°–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞"):
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    dist_files = list(Path('dist').glob('*'))
    if not dist_files:
        print("‚ùå –§–∞–π–ª—ã —Å–±–æ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False

    print("üì¶ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    for file_path in dist_files:
        print(f"   - {file_path}")

    return True


def check_package():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø–æ–º–æ—â—å—é twine
    if not run_command("python -m twine check dist/*", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞ twine"):
        return False

    return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞ DocxMD Converter –¥–ª—è PyPI")
    print("=" * 50)

    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    script_dir = Path(__file__).parent
    root_dir = script_dir.parent
    os.chdir(root_dir)

    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")

    # –°–±–æ—Ä–∫–∞
    if not build_package():
        print("‚ùå –°–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        sys.exit(1)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞
    if not check_package():
        print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        sys.exit(1)

    print("=" * 50)
    print("üéâ –ü–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ dist/")
    print("2. –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: python scripts/publish_test.py")
    print("3. –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ PyPI: python scripts/publish_pypi.py")


if __name__ == "__main__":
    main()