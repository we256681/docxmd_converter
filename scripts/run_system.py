#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã DocxMD Converter
–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ª—é–±–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–∏—Å—Ç–µ–º—ã
"""

import sys
import subprocess
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))


def print_banner():
    """–ü–µ—á–∞—Ç—å –±–∞–Ω–Ω–µ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã"""
    print("üöÄ DocxMD Converter v3.0.0")
    print("=" * 50)
    print("–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print("—Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∏ NLP")
    print("=" * 50)


def print_menu():
    """–ü–µ—á–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞"""
    print("\nüìã –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞:")
    print("1. üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä (intelligent_processor.py)")
    print("2. üé≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π (demo_all_features.py)")
    print("3. üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (web_interface.py)")
    print("4. üñ•Ô∏è  GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (gui.py)")
    print("5. ‚öôÔ∏è  CLI –ø–æ–º–æ—â—å (cli.py --help)")
    print("6. üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
    print("7. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print("0. ‚ùå –í—ã—Ö–æ–¥")


def run_intelligent_processor():
    """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    print("\nüß† –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
    script_path = Path(__file__).parent.parent / "src" / "docxmd_converter" / "intelligent_processor.py"
    subprocess.run([sys.executable, str(script_path)])


def run_demo():
    """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("\nüé≠ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...")
    script_path = Path(__file__).parent / "demo_all_features.py"
    subprocess.run([sys.executable, str(script_path)])


def run_web_interface():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print("\nüåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    print("üìç –ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5000")
    print("‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Flask —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install flask")

    try:
        script_path = Path(__file__).parent.parent / "src" / "docxmd_converter" / "web_interface.py"
        subprocess.run([sys.executable, str(script_path)])
    except KeyboardInterrupt:
        print("\nüõë –í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def run_gui():
    """–ó–∞–ø—É—Å–∫ GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print("\nüñ•Ô∏è  –ó–∞–ø—É—Å–∫ GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    try:
        from docxmd_converter.gui import run
        run()
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ GUI: {e}")
        script_path = Path(__file__).parent.parent / "src" / "docxmd_converter" / "gui.py"
        subprocess.run([sys.executable, str(script_path)])


def show_cli_help():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å CLI"""
    print("\n‚öôÔ∏è  CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å - —Å–ø—Ä–∞–≤–∫–∞:")
    subprocess.run([sys.executable, "-m", "docxmd_converter.cli", "--help"])


def run_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    base_path = Path(__file__).parent.parent
    components = [
        (base_path / "src" / "docxmd_converter" / "intelligent_processor.py", "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä"),
        (base_path / "config" / "document_templates.json", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤"),
        (base_path / "src" / "docxmd_converter" / "core.py", "–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å"),
        (base_path / "src" / "docxmd_converter" / "gui.py", "GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"),
        (base_path / "src" / "docxmd_converter" / "web_interface.py", "–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    ]

    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
    for filepath, description in components:
        if filepath.exists():
            print(f"   ‚úÖ {description}")
        else:
            print(f"   ‚ùå {description} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤:")
    try:
        from docxmd_converter.intelligent_processor import IntelligentProcessor
        print("   ‚úÖ IntelligentProcessor")
    except ImportError as e:
        print(f"   ‚ùå IntelligentProcessor: {e}")

    try:
        from docxmd_converter.core import DocxMdConverter
        print("   ‚úÖ DocxMdConverter")
    except ImportError as e:
        print(f"   ‚ùå DocxMdConverter: {e}")

    # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    print("\n‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    try:
        from docxmd_converter.intelligent_processor import IntelligentProcessor
        processor = IntelligentProcessor()
        stats = processor.get_processing_statistics()

        if stats.get('total_files_processed', 0) > 0:
            print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {stats['total_files_processed']}")
            print(f"   üìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {stats['average_quality_score']:.1f}/100")
        else:
            print("   ‚ÑπÔ∏è  –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–∞")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


def show_statistics():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")

    try:
        from docxmd_converter.intelligent_processor import IntelligentProcessor
        processor = IntelligentProcessor()
        stats = processor.get_processing_statistics()

        if stats.get('total_files_processed', 0) > 0:
            print(f"üìÅ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {stats['total_files_processed']}")
            print(f"‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats['average_processing_time']:.3f}—Å")
            print(f"üìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {stats['average_quality_score']:.1f}/100")
            print(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {stats.get('last_processed', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")

            print(f"\nüìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
            for doc_type, count in stats['document_types_distribution'].items():
                print(f"   {doc_type}: {count}")
        else:
            print("‚ÑπÔ∏è  –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–∞")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_banner()

    while True:
        print_menu()

        try:
            choice = input("\nüëâ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (0-7): ").strip()

            if choice == "0":
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == "1":
                run_intelligent_processor()
            elif choice == "2":
                run_demo()
            elif choice == "3":
                run_web_interface()
            elif choice == "4":
                run_gui()
            elif choice == "5":
                show_cli_help()
            elif choice == "6":
                run_tests()
            elif choice == "7":
                show_statistics()
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        except KeyboardInterrupt:
            print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")

        input("\nüì± –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")


if __name__ == "__main__":
    main()