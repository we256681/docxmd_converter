#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ DocxMD Converter –±–µ–∑ pandoc.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –ø–∞–∫–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–∏–º –ø—É—Ç—å –∫ –ø–∞–∫–µ—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π."""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π...")

    try:
        from docxmd_converter import DocxMdConverter, cli_main, gui_run
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")

        from docxmd_converter.core import ConversionError
        print("‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

        from docxmd_converter.cli import create_parser, validate_args
        print("‚úÖ CLI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_cli_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º CLI –ø–∞—Ä—Å–µ—Ä...")

    try:
        from docxmd_converter.cli import create_parser

        parser = create_parser()

        # –¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        args = parser.parse_args([
            '--src', './documents',
            '--dst', './output',
            '--direction', 'docx2md'
        ])

        print("‚úÖ –ü–∞—Ä—Å–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã")
        print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {args.src}")
        print(f"   –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {args.dst}")
        print(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {args.direction}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return False

def test_converter_class():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ (–±–µ–∑ pandoc)."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º DocxMdConverter –∫–ª–∞—Å—Å...")

    try:
        from docxmd_converter.core import DocxMdConverter, ConversionError

        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä (–æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É pandoc)
        try:
            converter = DocxMdConverter()
            print("‚úÖ Converter —Å–æ–∑–¥–∞–Ω (pandoc –Ω–∞–π–¥–µ–Ω)")
        except ConversionError as e:
            if "Pandoc is not installed" in str(e):
                print("‚ö†Ô∏è  Converter –Ω–µ —Å–æ–∑–¥–∞–Ω - pandoc –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–∂–∏–¥–∞–µ–º–æ)")
                print("   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
            else:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                return False

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        print("‚úÖ –ö–ª–∞—Å—Å DocxMdConverter –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        print("‚úÖ ConversionError –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞: {e}")
        return False

def show_package_structure():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–∫–µ—Ç–∞."""
    print("\nüìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–∫–µ—Ç–∞:")

    package_dir = Path("docxmd_converter")
    if package_dir.exists():
        for file in package_dir.iterdir():
            if file.is_file() and file.suffix == '.py':
                size = file.stat().st_size
                print(f"   üìÑ {file.name} ({size} bytes)")

    print("\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    config_files = ["pyproject.toml", "requirements.txt", "README.md", "LICENSE"]
    for file in config_files:
        if Path(file).exists():
            print(f"   ‚úÖ {file}")
        else:
            print(f"   ‚ùå {file} (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")

def show_entry_points():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º entry points."""
    print("\nüöÄ Entry Points (–∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏):")
    print("   üìü docxmd         - CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    print("   üñ•Ô∏è  docxmd-gui     - GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")

    # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã
    import subprocess
    import os

    venv_python = "venv/bin/python" if os.name != 'nt' else "venv\\Scripts\\python.exe"

    try:
        result = subprocess.run(
            [venv_python, "-c", "import docxmd_converter.cli; print('CLI –º–æ–¥—É–ª—å –≥–æ—Ç–æ–≤')"],
            capture_output=True,
            text=True,
            cwd=Path(__file__).parent
        )
        if result.returncode == 0:
            print("   ‚úÖ CLI –º–æ–¥—É–ª—å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            print(f"   ‚ö†Ô∏è  CLI –º–æ–¥—É–ª—å: {result.stderr.strip()}")

    except Exception as e:
        print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å CLI: {e}")

def show_next_steps():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏."""
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:")
    print()
    print("1. üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Pandoc (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏):")
    print("   sudo apt-get install pandoc")
    print("   # –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å —Å https://pandoc.org/installing.html")
    print()
    print("2. üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã:")
    print("   pip install pytest")
    print("   pytest tests/")
    print()
    print("3. üöÄ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å CLI:")
    print("   docxmd --help")
    print("   docxmd --src ./docs --dst ./md --direction docx2md")
    print()
    print("4. üñ•Ô∏è  –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å GUI:")
    print("   docxmd-gui")
    print()
    print("5. üì¶ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–∞ PyPI:")
    print("   pip install build twine")
    print("   python -m build")
    print("   twine upload dist/*")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è."""
    print("=" * 60)
    print("üéØ DocxMD Converter - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–∞")
    print("=" * 60)

    # –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    tests_passed = 0
    total_tests = 0

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", test_imports),
        ("CLI –ø–∞—Ä—Å–µ—Ä", test_cli_parser),
        ("–ö–ª–∞—Å—Å –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞", test_converter_class),
    ]

    for test_name, test_func in tests:
        total_tests += 1
        if test_func():
            tests_passed += 1

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    show_package_structure()
    show_entry_points()
    show_next_steps()

    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {tests_passed}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if tests_passed == total_tests:
        print("üéâ –ü–∞–∫–µ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é! (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ pandoc)")
        print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")

    print("=" * 60)

if __name__ == "__main__":
    main()